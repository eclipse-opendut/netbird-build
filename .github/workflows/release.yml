name: Test Code Linux

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || github.actor_id }}
  cancel-in-progress: true

env:
  netbird_repository: "eclipse-opendut/netbird-fork"
  netbird_ref: "5619306f5c4f40e7f19f64c5bcbf81cd87cff7c2"
  netbird_version: "v0.28.9"  # git describe --tags | grep -Eo 'v[0-9]+.[0-9]+.[0-9]+'

  go_version: "1.21.x"
  GORELEASER_VER: "v1.14.1"
  # do not publish artifacts since this requires secrets of the respective targets
  GORELEASER_FLAGS: "--skip-docker --skip-publish"



jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ '386','amd64' ]
        store: [ 'sqlite', 'postgres' ]

    steps:
      - name: Checkout sources
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b #4.1.5
        with:
          repository: '${{ env.netbird_repository }}'
          ref: '${{ env.netbird_ref }}'

      # Steps taken from: .github/workflows/golang-test-linux.yml
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.go_version }}"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y -q libgtk-3-dev libayatana-appindicator3-dev libgl1-mesa-dev xorg-dev gcc-multilib libpcap-dev

      - name: Install 32-bit libpcap
        if: matrix.arch == '386'
        run: sudo dpkg --add-architecture i386 && sudo apt update && sudo apt-get install -y libpcap0.8-dev:i386

      - name: Install modules
        run: go mod tidy

      - name: check git status
        run: git --no-pager diff --exit-code

      - name: Test
        run: CGO_ENABLED=1 GOARCH=${{ matrix.arch }} NETBIRD_STORE_ENGINE=${{ matrix.store }} go test -exec 'sudo --preserve-env=CI,NETBIRD_STORE_ENGINE' -timeout 5m -p 1 ./...

  release:
    runs-on: ubuntu-latest
    needs: [ "test" ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b #4.1.5
        with:
          repository: '${{ env.netbird_repository }}'
          ref: '${{ env.netbird_ref }}'

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.go_version }}"
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-releaser-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-releaser-

      - name: Install modules
        run: go mod tidy

      - name: Install OS build dependencies
        run: sudo apt update && sudo apt install -y -q gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

      - name: Set custom git tag - the custom NetBird release version
        run: |
          git tag ${{ env.netbird_version }}-${{ env.netbird_ref }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: ${{ env.GORELEASER_VER }}
          args: release --rm-dist ${{ env.GORELEASER_FLAGS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: dist/
          retention-days: 3

      - uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5  # v1.14.0
        name: "Create release"
        with:
          artifacts: "dist/netbird*.tar.gz"
